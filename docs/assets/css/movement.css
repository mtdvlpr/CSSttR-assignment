/* Movement */

/* Set player position */
output {
  translate: calc((var(--size-screen) - var(--size-player)) * var(--x, 0))
    calc((var(--size-screen) - var(--size-player)) * var(--y, 0));
}

:root {
  /* Transition back very slowly */
  transition: --x var(--transition-stop), --y var(--transition-stop);

  /* Player location in steps */
  --steps: calc(var(--size-grid) * var(--size-grid));
  --x-steps: max(calc(var(--x, 0) * var(--steps) + 0.49), 1);
  --y-steps: max(calc(var(--y, 0) * var(--steps) + 0.49), 1);
  /*
  body {
    --x-steps: max(calc(var(--x, 0) * var(--steps) + 0.49), 1);
    --y-steps: max(calc(var(--y, 0) * var(--steps) + 0.49), 1);
  }*/

  /* Move player up/down */
  &:has(input:nth-of-type(1):checked),
  &:has(input:nth-of-type(4):checked) {
    transition: --x var(--transition-stop), --y var(--transition-player);
  }

  /* Move player left/right */
  &:has(input:nth-of-type(2):checked),
  &:has(input:nth-of-type(3):checked) {
    transition: --x var(--transition-player), --y var(--transition-stop);
  }

  /* Up */
  &:has(input:nth-of-type(1):checked) {
    --y: 0.00001;
    output {
      transform: rotate(-90deg);
    }
  }

  /* Left */
  &:has(input:nth-of-type(2):checked) {
    --x: 0.00001;
    output {
      transform: rotate(180deg);
    }
  }

  /* Right */
  &:has(input:nth-of-type(3):checked) {
    --x: 1;
  }

  /* Down */
  &:has(input:nth-of-type(4):checked) {
    --y: 1;
    output {
      transform: rotate(90deg);
    }
  }
}

/* Player position */
@property --x {
  syntax: "<number>";
  inherits: true;
  initial-value: 0;
}

@property --y {
  syntax: "<number>";
  inherits: true;
  initial-value: 0;
}

/* Player steps */
@property --x-steps {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}

@property --y-steps {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}
