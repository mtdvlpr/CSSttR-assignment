/* Movement */

:root {
  /* Transition back very slowly */
  transition: --x 10000s linear, --y 10000s linear;

  /* Player location in steps */
  --steps: calc(var(--size-grid) * var(--size-grid));
  --x-steps: max(calc(var(--x, 0) * var(--steps) + 0.49), 1);
  --y-steps: max(calc(var(--y, 0) * var(--steps) + 0.49), 1);

  /* Move player */
  &:has(button:active) {
    transition: --x var(--transition-player) linear,
      --y var(--transition-player) linear;
  }
}

/* Set player position */
output {
  translate: calc((var(--size-screen) - var(--size-player)) * var(--x, 0))
    calc((var(--size-screen) - var(--size-player)) * var(--y, 0));
}

/* Listen for button active to change move animation */

/* Up */
:root:has(button:nth-of-type(1):active) {
  --y: 0.00001;
  output {
    transform: rotate(-90deg);
  }
}

/* Left */
:root:has(button:nth-of-type(2):active) {
  --x: 0.00001;
  output {
    transform: rotate(180deg);
  }
}

/* Right */
:root:has(button:nth-of-type(3):active) {
  --x: 1;
}

/* Down */
:root:has(button:nth-of-type(4):active) {
  --y: 1;
  output {
    transform: rotate(90deg);
  }
}

/* Player position */
@property --x {
  syntax: "<number>";
  inherits: true;
  initial-value: 0;
}

@property --y {
  syntax: "<number>";
  inherits: true;
  initial-value: 0;
}

/* Player steps */
@property --x-steps {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}

@property --y-steps {
  syntax: "<integer>";
  inherits: true;
  initial-value: 0;
}
